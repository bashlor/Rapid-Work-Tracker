// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeNonSerializedTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type LandingGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/landing/landing_controller.ts').default['show'], false>
}
type AuthLoginGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/login_controller.ts').default['show'], false>
}
type AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/auth/validators/http_requests/login_validator.ts')['loginValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/login_controller.ts').default['store'], true>
}
type AuthRegisterGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/register_controller.ts').default['show'], false>
}
type AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/auth/validators/http_requests/register_validator.ts')['registerValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/register_controller.ts').default['store'], true>
}
type LogoutPost = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/logout_controller.ts').default['store'], false>
}
type AppHomeGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/home_controller.ts').default['index'], false>
}
type AppUserworkdataGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/user_work_data_controller.ts').default['show'], false>
}
type AppSessionsGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['show'], false>
}
type AppChronometerGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/chronometer_controller.ts').default['show'], false>
}
type ApiAuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/auth/validators/http_requests/login_validator.ts')['loginValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/login_controller.ts').default['apiStore'], true>
}
type ApiAuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/auth/validators/http_requests/register_validator.ts')['registerValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/register_controller.ts').default['apiStore'], true>
}
type ApiAuthLogoutPost = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/auth/controllers/logout_controller.ts').default['apiStore'], false>
}
type ApiDashboardGetHead = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/dashboard_validators.ts')['getDashboardDataValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/dashboard_controller.ts').default['index'], true>
}
type ApiDomainsPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/create_domain_validator.ts')['createDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/domain_controller.ts').default['createDomain'], true>
}
type ApiDomainsGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/domain_controller.ts').default['getDomains'], false>
}
type ApiDomainsIdDelete = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/delete_domain_validator.ts')['deleteDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/domain_controller.ts').default['deleteDomain'], true>
}
type ApiDomainsIdPatch = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/update_domain_validator.ts')['updateDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/domain_controller.ts').default['editDomain'], true>
}
type ApiSubdomainsPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/create_subdomain_validator.ts')['createSubDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/subdomain_controller.ts').default['createSubdomain'], true>
}
type ApiSubdomainsIdDelete = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/delete_subdomain_validator.ts')['deleteSubDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/subdomain_controller.ts').default['deleteSubdomain'], true>
}
type ApiSubdomainsIdPatch = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/update_subdomain_validator.ts')['updateSubDomainValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/subdomain_controller.ts').default['editSubdomain'], true>
}
type ApiTasksGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['index'], false>
}
type ApiTasksPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/create_task_validator.ts')['createTaskValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['create'], true>
}
type ApiTasksIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/update_task_validator.ts')['updateTaskValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['update'], true>
}
type ApiTasksIdDelete = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/delete_task_validator.ts')['deleteTaskValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['delete'], true>
}
type ApiTasksDomainIdGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['getByDomain'], false>
}
type ApiTasksSubdomainIdGetHead = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/task_controller.ts').default['getBySubdomain'], false>
}
type ApiSessionsBydateGetHead = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/session_validators.ts')['getSessionsByDateValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['getByDate'], true>
}
type ApiSessionsPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/session_validators.ts')['createSessionValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['create'], true>
}
type ApiSessionsIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/session_validators.ts')['updateSessionValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['update'], true>
}
type ApiSessionsPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/core/main/validators/http_requests/session_validators.ts')['updateMultipleSessionsValidator']>>
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['updateMultiple'], true>
}
type ApiSessionsIdDelete = {
  request: unknown
  response: MakeNonSerializedTuyauResponse<import('../app/core/main/controllers/app/session_controller.ts').default['delete'], false>
}
export interface ApiDefinition {
  'landing': {
    '$url': {
    };
    '$get': LandingGetHead;
    '$head': LandingGetHead;
  };
  'auth': {
    'login': {
      '$url': {
      };
      '$get': AuthLoginGetHead;
      '$head': AuthLoginGetHead;
      '$post': AuthLoginPost;
    };
    'register': {
      '$url': {
      };
      '$get': AuthRegisterGetHead;
      '$head': AuthRegisterGetHead;
      '$post': AuthRegisterPost;
    };
  };
  'logout': {
    '$url': {
    };
    '$post': LogoutPost;
  };
  'app': {
    'home': {
      '$url': {
      };
      '$get': AppHomeGetHead;
      '$head': AppHomeGetHead;
    };
    'user_work_data': {
      '$url': {
      };
      '$get': AppUserworkdataGetHead;
      '$head': AppUserworkdataGetHead;
    };
    'sessions': {
      '$url': {
      };
      '$get': AppSessionsGetHead;
      '$head': AppSessionsGetHead;
    };
    'chronometer': {
      '$url': {
      };
      '$get': AppChronometerGetHead;
      '$head': AppChronometerGetHead;
    };
  };
  'api': {
    'auth': {
      'login': {
        '$url': {
        };
        '$post': ApiAuthLoginPost;
      };
      'register': {
        '$url': {
        };
        '$post': ApiAuthRegisterPost;
      };
      'logout': {
        '$url': {
        };
        '$post': ApiAuthLogoutPost;
      };
    };
    'dashboard': {
      '$url': {
      };
      '$get': ApiDashboardGetHead;
      '$head': ApiDashboardGetHead;
    };
    'domains': {
      '$url': {
      };
      '$post': ApiDomainsPost;
      '$get': ApiDomainsGetHead;
      '$head': ApiDomainsGetHead;
      ':domain_id': {
        '$url': {
        };
        '$delete': ApiDomainsIdDelete;
        '$patch': ApiDomainsIdPatch;
      };
    };
    'subdomains': {
      '$url': {
      };
      '$post': ApiSubdomainsPost;
      ':subdomain_id': {
        '$url': {
        };
        '$delete': ApiSubdomainsIdDelete;
        '$patch': ApiSubdomainsIdPatch;
      };
    };
    'tasks': {
      '$url': {
      };
      '$get': ApiTasksGetHead;
      '$head': ApiTasksGetHead;
      '$post': ApiTasksPost;
      ':id': {
        '$url': {
        };
        '$put': ApiTasksIdPut;
        '$delete': ApiTasksIdDelete;
      };
      'domain': {
        ':domainId': {
          '$url': {
          };
          '$get': ApiTasksDomainIdGetHead;
          '$head': ApiTasksDomainIdGetHead;
        };
      };
      'subdomain': {
        ':subdomainId': {
          '$url': {
          };
          '$get': ApiTasksSubdomainIdGetHead;
          '$head': ApiTasksSubdomainIdGetHead;
        };
      };
    };
    'sessions': {
      'by_date': {
        '$url': {
        };
        '$get': ApiSessionsBydateGetHead;
        '$head': ApiSessionsBydateGetHead;
      };
      '$url': {
      };
      '$post': ApiSessionsPost;
      ':id': {
        '$url': {
        };
        '$put': ApiSessionsIdPut;
        '$delete': ApiSessionsIdDelete;
      };
      '$put': ApiSessionsPut;
    };
  };
}
const routes = [
  {
    params: [],
    name: 'landing',
    path: '/landing',
    method: ["GET","HEAD"],
    types: {} as LandingGetHead,
  },
  {
    params: [],
    name: 'login.show',
    path: '/auth/login',
    method: ["GET","HEAD"],
    types: {} as AuthLoginGetHead,
  },
  {
    params: [],
    name: 'login.store',
    path: '/auth/login',
    method: ["POST"],
    types: {} as AuthLoginPost,
  },
  {
    params: [],
    name: 'register.show',
    path: '/auth/register',
    method: ["GET","HEAD"],
    types: {} as AuthRegisterGetHead,
  },
  {
    params: [],
    name: 'register.store',
    path: '/auth/register',
    method: ["POST"],
    types: {} as AuthRegisterPost,
  },
  {
    params: [],
    name: 'logout.show',
    path: '/logout',
    method: ["POST"],
    types: {} as LogoutPost,
  },
  {
    params: [],
    name: 'home.show',
    path: '/app/home',
    method: ["GET","HEAD"],
    types: {} as AppHomeGetHead,
  },
  {
    params: [],
    name: 'user_work_data.show',
    path: '/app/user_work_data',
    method: ["GET","HEAD"],
    types: {} as AppUserworkdataGetHead,
  },
  {
    params: [],
    name: 'sessions.show',
    path: '/app/sessions',
    method: ["GET","HEAD"],
    types: {} as AppSessionsGetHead,
  },
  {
    params: [],
    name: 'chronometer.show',
    path: '/app/chronometer',
    method: ["GET","HEAD"],
    types: {} as AppChronometerGetHead,
  },
  {
    params: [],
    name: 'api.login',
    path: '/api/auth/login',
    method: ["POST"],
    types: {} as ApiAuthLoginPost,
  },
  {
    params: [],
    name: 'api.register',
    path: '/api/auth/register',
    method: ["POST"],
    types: {} as ApiAuthRegisterPost,
  },
  {
    params: [],
    name: 'api.logout',
    path: '/api/auth/logout',
    method: ["POST"],
    types: {} as ApiAuthLogoutPost,
  },
  {
    params: [],
    name: 'api.dashboard',
    path: '/api/dashboard',
    method: ["GET","HEAD"],
    types: {} as ApiDashboardGetHead,
  },
  {
    params: [],
    name: 'api.domains.create',
    path: '/api/domains',
    method: ["POST"],
    types: {} as ApiDomainsPost,
  },
  {
    params: [],
    name: 'api.domains.get',
    path: '/api/domains',
    method: ["GET","HEAD"],
    types: {} as ApiDomainsGetHead,
  },
  {
    params: ["domain_id"],
    name: 'api.domains.delete',
    path: '/api/domains/:domain_id',
    method: ["DELETE"],
    types: {} as ApiDomainsIdDelete,
  },
  {
    params: ["domain_id"],
    name: 'api.domains.edit',
    path: '/api/domains/:domain_id',
    method: ["PATCH"],
    types: {} as ApiDomainsIdPatch,
  },
  {
    params: [],
    name: 'api.subdomains.create',
    path: '/api/subdomains',
    method: ["POST"],
    types: {} as ApiSubdomainsPost,
  },
  {
    params: ["subdomain_id"],
    name: 'api.subdomains.delete',
    path: '/api/subdomains/:subdomain_id',
    method: ["DELETE"],
    types: {} as ApiSubdomainsIdDelete,
  },
  {
    params: ["subdomain_id"],
    name: 'api.subdomains.edit',
    path: '/api/subdomains/:subdomain_id',
    method: ["PATCH"],
    types: {} as ApiSubdomainsIdPatch,
  },
  {
    params: [],
    name: 'api.tasks.index',
    path: '/api/tasks',
    method: ["GET","HEAD"],
    types: {} as ApiTasksGetHead,
  },
  {
    params: [],
    name: 'api.tasks.create',
    path: '/api/tasks',
    method: ["POST"],
    types: {} as ApiTasksPost,
  },
  {
    params: ["id"],
    name: 'api.tasks.update',
    path: '/api/tasks/:id',
    method: ["PUT"],
    types: {} as ApiTasksIdPut,
  },
  {
    params: ["id"],
    name: 'api.tasks.delete',
    path: '/api/tasks/:id',
    method: ["DELETE"],
    types: {} as ApiTasksIdDelete,
  },
  {
    params: ["domainId"],
    name: 'api.tasks.byDomain',
    path: '/api/tasks/domain/:domainId',
    method: ["GET","HEAD"],
    types: {} as ApiTasksDomainIdGetHead,
  },
  {
    params: ["subdomainId"],
    name: 'api.tasks.bySubdomain',
    path: '/api/tasks/subdomain/:subdomainId',
    method: ["GET","HEAD"],
    types: {} as ApiTasksSubdomainIdGetHead,
  },
  {
    params: [],
    name: 'api.sessions.by_date',
    path: '/api/sessions/by_date',
    method: ["GET","HEAD"],
    types: {} as ApiSessionsBydateGetHead,
  },
  {
    params: [],
    name: 'api.sessions.create',
    path: '/api/sessions',
    method: ["POST"],
    types: {} as ApiSessionsPost,
  },
  {
    params: ["id"],
    name: 'api.sessions.update',
    path: '/api/sessions/:id',
    method: ["PUT"],
    types: {} as ApiSessionsIdPut,
  },
  {
    params: [],
    name: 'api.sessions.update_multiple',
    path: '/api/sessions',
    method: ["PUT"],
    types: {} as ApiSessionsPut,
  },
  {
    params: ["id"],
    name: 'api.sessions.delete',
    path: '/api/sessions/:id',
    method: ["DELETE"],
    types: {} as ApiSessionsIdDelete,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
declare module '@tuyau/inertia/types' {
  type InertiaApi = typeof api
  export interface Api extends InertiaApi {}
}
